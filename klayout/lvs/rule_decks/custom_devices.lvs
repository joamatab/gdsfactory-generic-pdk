# frozen_string_literal: true

# ===================================================================================
# Copyright (c) 2024, Mabrains LLC
# Licensed under the GNU Lesser General Public License, Version 3.0 (the "License");
# you may not use this file except in compliance with the License.

#                    GNU Lesser General Public License
#                       Version 3, 29 June 2007

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# SPDX-License-Identifier: LGPL-3.0
# ===================================================================================

#================================================
# --------------- CUSTOM DEVICES ----------------
#================================================

# === DeviceClassNTerminal ===
class DeviceClassNTerminal < RBA::DeviceClassResistor
  # Adding required parameters for devices

  def initialize(name, num)
    # clear terminals and parameters of resistor class
    clear_parameters
    clear_terminals

    # Add parameters for each device based on name
    if name.downcase.start_with?('mmi')
      add_parameters('length_mmi', 'width_mmi', 'gap_mmi', 'width_taper', 'length_taper')
    elsif name.downcase.start_with?('straight_heater_meander')
      add_parameters('heater_width')
    elsif name.downcase.start_with?('disk')
      add_parameters('gap', 'raduis')
    elsif name.downcase.start_with?('dbr')
      add_parameters('w1', 'w2', 'l1', 'l2', 'n')
    elsif name.downcase.start_with?('coupler')
      add_parameters('gap', 'length', 'dx', 'dy')
    elsif name.downcase.start_with?('grating_coupler')
      add_parameters('taper_length')
    end

    add_terminals(name, num)
  end

  private

  def add_parameters(*names)
    names.each { |name| add_parameter(RBA::DeviceParameterDefinition.new(name)) }
  end

  def add_terminals(name, num)
    (1..num).each do |i|
      terminal_name = "#{name}_#{i}"
      ter = add_terminal(RBA::DeviceTerminalDefinition.new(terminal_name))
      ter.name = terminal_name
    end
  end
end

# === GeneralNTerminalExtractor ===
class GeneralNTerminalExtractor < RBA::GenericDeviceExtractor
  # Extraction of N terminal devices - General Class

  def initialize(name, num)
    # Initialize the extractor with a device name and number of terminals.
    #
    # Args:
    #   name (String): The name of the device.
    #   num (Integer): Number of terminals.
    create
    self.name = name
    @num = num
    @name = name
  end

  def setup
    # Set up layers and register device class for extraction.
    define_layers
    # Register device class for extraction.
    @reg_dev = DeviceClassNTerminal.new(name, @num)
    register_device_class(@reg_dev)
  end

  def get_connectivity(_layout, layers)
    # Establish connectivity between layers.
    #
    # Args:
    #   _layout: Layout object (unused).
    #   layers (Array): Array of layer objects.
    #
    # Returns:
    #   Connectivity object representing the connections between layers.
    dev = layers[0]
    ports = layers[1]
    meas_mk = layers[2]
    dev_mk = layers[3]

    conn = RBA::Connectivity.new
    conn.connect(dev, dev)
    conn.connect(dev, dev_mk)
    conn.connect(dev, meas_mk)
    conn.connect(ports, dev_mk)
    conn.connect(meas_mk, dev_mk)

    conn
  end

  def extract_devices(layer_geometry)
    # Extract devices based on layer geometry.
    #
    # Args:
    #   layer_geometry (Array): Array of layer geometries.
    dev, ports, meas_mk, dev_mk = layer_geometry
    measured_regions = dev_mk.merged
    measured_regions.each do |region|
      if ports.size != @num
        $logger.info("#{@name} device terminals (#{@num}) don't touch device marker correctly")
      else
        device = create_device
        set_device_parameters(device, region, dev, ports, meas_mk, dev_mk)
        define_and_sort_terminals(device, ports)
      end
    end
  end

  private

  def define_layers
    # Define layers for extraction.
    define_layer('seed', 'Seed Layer')
    define_layer('ports', 'Connect Terminal')
    define_layer('meas_mk', 'Measuring parameters Marker')
    define_layer('dev_mk', 'Device Marker')
  end

  def set_device_parameters(device, _region, dev, ports, meas_mk, dev_mk)
    # Set device parameters based on device type.
    #
    # Args:
    #   device: Device object to set parameters for.
    #   region: Region representing the measured region.
    #   dev: Device layer object.
    #   ports: ports layer object.
    #   meas_mk: Measuring marker layer object.
    #   dev_mk: main marker layer object.
    #
    # Returns:
    #   None

    if name.start_with?('coupler')
      gap, length, dx, dy = calc_coupler_params(dev, ports, meas_mk, dev_mk)

      device.set_parameter('gap', gap * $unit)
      device.set_parameter('length', length * $unit)
      device.set_parameter('dx', dx * $unit)
      device.set_parameter('dy', dy * $unit)
    elsif name.start_with?('mmi')
      l_mmi, w_mmi, gap_mmi, w_taper, l_taper = calc_mmi_params(dev, ports, meas_mk, dev_mk)

      device.set_parameter('length_mmi', l_mmi * $unit)
      device.set_parameter('width_mmi', w_mmi * $unit)
      device.set_parameter('gap_mmi', gap_mmi * $unit)
      device.set_parameter('width_taper', w_taper * $unit)
      device.set_parameter('length_taper', l_taper * $unit)
    elsif name.start_with?('dbr')
      w1, w2, l1, l2, n = calc_dbr_params(dev, ports, meas_mk, dev_mk)

      device.set_parameter('w1', w1 * $unit)
      device.set_parameter('w2', w2 * $unit)
      device.set_parameter('l1', l1 * $unit)
      device.set_parameter('l2', l2 * $unit)
      device.set_parameter('n', n)
    elsif name.start_with?('disk')
      raduis, gap = calc_disk_params(dev, ports, dev_mk, meas_mk)

      device.set_parameter('raduis', raduis * $unit)
      device.set_parameter('gap', gap * $unit)
    elsif name.start_with?('grating_coupler')
      taper_length = calc_grating_params(dev, ports, dev_mk, meas_mk)

      device.set_parameter('taper_length', taper_length * $unit)

    end
  end

  def calc_mmi_params(dev, ports, meas_mk, dev_mk)
    # Initialize parameters
    l_mmi = 0
    w_mmi = 0
    gap_mmi = 0
    w_taper = 0
    l_taper = 0

    # Get gap val
    mmi_gap_edges = dev.edges.not(meas_mk.edges).not_interacting(dev_mk.edges)
    gap_mmi = get_uniq_length(mmi_gap_edges)

    # Get mmi len & width
    mmi_edges_len = dev.edges.and(dev_mk.edges)
    l_mmi = get_uniq_length(mmi_edges_len)
    mmi_edges_width = dev.edges.not(mmi_edges_len)
    w_mmi = get_uniq_length(mmi_edges_width)

    # Get taper len & width
    taper_edges_width = meas_mk.edges.and(dev.edges)
    w_taper = get_uniq_length(taper_edges_width)
    mk_edges_len = dev_mk.edges.not_interacting(ports)
    mk_len = get_uniq_length(mk_edges_len)
    l_taper_ = (mk_len - l_mmi) / 2
    l_taper = l_taper_.positive? ? l_taper_ : 0

    [l_mmi, w_mmi, gap_mmi, w_taper, l_taper]
  end

  def calc_dbr_params(dev, ports, _meas_mk, dev_mk)
    # Initialize parameters
    w1 = 0.0
    w2 = 0.0
    l1 = 0.0
    l2 = 0.0
    n = 0

    # Get width from ports interactions
    # Get w1, w2 after sorting width edges
    large_w = dev.edges.in(dev_mk.edges)
    small_w = ports.edges.and(dev_mk.edges).interacting(ports).not_interacting(large_w)
    width_edges = large_w.join(small_w)
    sorted_w_edges = sort_edges(width_edges)
    # Make sure that we have 2 widths only
    if sorted_w_edges.size == 2
      w1 = sorted_w_edges[0].length
      w2 = sorted_w_edges[1].length
    end

    # Get len outside
    out_edges = dev.edges.outside_part(dev_mk).not_interacting(ports)
    len_out = get_uniq_length(out_edges)

    # Get len inside
    in_edges = dev.edges.not_interacting(dev_mk.edges).not_interacting(ports)
    len_in = get_uniq_length(in_edges)

    # Maping l1, l2 depends on widths
    if w1 > w2
      l1 = len_out
      l2 = len_in
    else
      l1 = len_in
      l2 = len_out
    end

    # Calc N
    n = out_edges.size == in_edges.size ? out_edges.size / 2 : 0

    [w1, w2, l1, l2, n + 1]
  end

  def calc_coupler_params(dev, ports, meas_mk, dev_mk)
    # Initialize parameters
    gap = 0.0
    length = 0.0
    dx = 0.0
    dy = 0.0

    # Length
    length_edges = meas_mk.edges.outside_part(dev)
    length = get_uniq_length(length_edges)

    # Gap (space between lengths)
    len_mk = get_max_length(dev_mk.edges)
    gap = get_space_val(length_edges, len_mk)

    # Get coupler width for dy calc
    width_edges = meas_mk.edges.inside_part(dev)
    width = get_uniq_length(width_edges)

    # Calc dx & dy values using [dev_mk, meas_mk]
    dev_mk_h = dev_mk.edges.with_angle(0, false)
    dev_mk_v = dev_mk.edges.with_angle(90, false)

    dev_mk_h_len = get_uniq_length(dev_mk_h)
    dev_mk_v_len = get_uniq_length(dev_mk_v)

    dx = (dev_mk_h_len - length) / 2
    dy = dev_mk_v_len - width

    [gap, length, dx, dy]
  end

  def calc_disk_params(dev, _con, _dev_mk, meas_mk)
    # Initialize parameters
    gap = 0.0
    raduis = 0.0

    # Calc raduis
    raduis = 2 * dev.area / dev.perimeter

    # Calc gap by calc the separation between core and bus
    gap = get_sep_val(meas_mk, dev, 10 * raduis)

    [raduis, gap]
  end

  def calc_grating_params(_dev, _con, dev_mk, meas_mk)
    # Initialize parameters
    taper_length = 0.0

    # Calc taper_len
    taper_edges = meas_mk.edges.inside_part(dev_mk).interacting(dev_mk.edges)
    get_uniq_length(taper_edges)
  end

  def define_and_sort_terminals(device, ports)
    # Define and sort terminals based on location.
    #
    # Args:
    #   device: Device object to define terminals for.
    #   ports: Contact layer object containing terminals.
    #
    # Returns:
    #   None

    # If none of the substrings match, sorted_ports remains the result of sort_polygons(ports)
    substrings = %w[straight_heater_doped grating_coupler]

    # Initialize sorted_ports with a default value
    sorted_ports = nil

    # Iterate over each substring
    substrings.each do |substring|
      if name.include?(substring)
        sorted_ports = ports
        break # Exit loop if a match is found
      end
    end

    # If none of the substrings match, sorted_ports remains the result of sort_polygons(ports)
    sorted_ports ||= sort_polygons(ports)
    # Defination of terminals
    (1..@num).each do |i|
      define_terminal(device, @reg_dev.terminal_id("#{name}_#{i}"), 1, sorted_ports[i - 1])
    end
  end

  def sort_edges(edges)
    # Sort edges based on their x-coordinate.
    #
    # Args:
    #   edges: Edges to sort.
    #
    # Returns:
    #   Sorted edges.
    #
    # Note:
    #   This function sorts the edges based on the x-coordinate of their starting point.
    #   It takes an array of edges and returns the sorted array.
    edge_array = []
    edges.each do |edge|
      edge_array << [[edge.x1, edge.y1], [edge.x2, edge.y2]]
    end

    sorted_edges = edge_array.sort_by { |edge| edge[0][0] }

    sorted_edge_objects = sorted_edges.map do |edge|
      RBA::Edge.new(edge[0][0], edge[0][1], edge[1][0], edge[1][1])
    end

    sorted_rba_edges = RBA::Edges.new(sorted_edge_objects)
  end

  def sort_polygons(polygons)
    # Sort polygons points.
    #
    # Args:
    #   polygons: Polygons to sort.
    #
    # Returns:
    #   Sorted polygons.
    #
    # Note:
    #   This function sorts the points of the input polygons to be ordered as expected.
    #   It takes an array of polygons and returns the sorted array.
    #   The sorting is based on the x-coordinate of the first point of each polygon.
    con_polygons = []
    polygons.merged.each do |ports_pl|
      con_edges = []
      ports_pl.each_edge do |con_ed|
        con_edges.append([con_ed.x1, con_ed.y1])
        con_edges.append([con_ed.x2, con_ed.y2])
      end
      con_polygons.append(con_edges.uniq)
    end
    sorted_ports_polygons = con_polygons.sort_by(&:first)
    sorted_ports = []
    sorted_ports_polygons.each do |sorted_pl|
      ports_pl = RBA::DPolygon.new([RBA::DPoint.new(sorted_pl[0][0], sorted_pl[0][1]),
                                    RBA::DPoint.new(sorted_pl[1][0], sorted_pl[1][1]),
                                    RBA::DPoint.new(sorted_pl[2][0], sorted_pl[2][1]),
                                    RBA::DPoint.new(sorted_pl[3][0], sorted_pl[3][1])])
      sorted_ports.append(ports_pl)
    end

    sorted_ports
  end

  def get_uniq_length(sel_edges)
    # Extract uniqe length value for some selected edges
    lengths = []
    sel_edges.each do |edge|
      lengths << edge.length
    end
    lengths.uniq!
    lengths.size == 1 ? lengths[0] : 0.0
  end

  def get_sep_val(sel_edges, sep_edges, sep_val)
    # Extract distance between edges for separation check
    proj = RBA::Metrics::Projection
    sep_paris = sel_edges.separation_check(sep_edges, sep_val, proj)
    sep_values = []
    sep_paris.each do |edge|
      sep_values << edge.distance
    end
    sep_values.min
  end

  def get_space_val(sel_edges, sep_val)
    # Extract distance between edges for space check
    proj = RBA::Metrics::Projection
    space_paris = sel_edges.space_check(sep_val, proj)
    space_values = []
    space_paris.each do |edge|
      space_values << edge.distance
    end
    space_values.min
  end

  def get_max_length(sel_edges)
    # Extract max length value for some selected edges
    lengths = []
    len = 0
    sel_edges.each do |edge|
      lengths << edge.length
    end
    lengths.max
  end
end

# === GeneralNTerminalExtractorWithElectricalPorts ===
class GeneralNTerminalExtractorWithElectricalPorts < RBA::GenericDeviceExtractor
  # Extraction of N terminal devices with electrical ports - General Class

  def initialize(name, num)
    # Initialize the extractor with a device name and number of terminals.
    #
    # Args:
    #   name (String): The name of the device.
    #   num (Integer): Number of terminals.
    create
    self.name = name
    @num = num
  end

  def setup
    # Set up layers and register device class for extraction.
    define_layers
    # Register device class for extraction.
    @reg_dev = DeviceClassNTerminal.new(name, @num)
    register_device_class(@reg_dev)
  end

  def get_connectivity(_layout, layers)
    # Establish connectivity between layers.
    #
    # Args:
    #   _layout: Layout object (unused).
    #   layers (Array): Array of layer objects.
    #
    # Returns:
    #   Connectivity object representing the connections between layers.
    dev = layers[0]
    ports_o = layers[1]  # Optical Ports
    ports_e = layers[2]  # Electrical Ports
    meas_mk = layers[3]
    dev_mk = layers[4]

    conn = RBA::Connectivity.new
    conn.connect(dev, dev)
    conn.connect(dev, meas_mk)
    conn.connect(dev, dev_mk)
    conn.connect(ports_o, dev_mk)
    conn.connect(ports_e, dev_mk)
    conn.connect(ports_o, ports_o)
    conn.connect(ports_e, ports_e)

    conn
  end

  def extract_devices(layer_geometry)
    # Extract devices based on layer geometry.
    #
    # Args:
    #   layer_geometry (Array): Array of layer geometries.
    dev, ports_o, ports_e, meas_mk, dev_mk = layer_geometry
    measured_regions = dev_mk.merged
    measured_regions.each do |region|
      ports = ports_o.join(ports_e)
      if ports.size != @num
        $logger.info("Device terminals (#{@num}) don't touch device marker correctly")
      else
        device = create_device
        set_device_parameters(device, region, dev, ports_o, ports_e, meas_mk, dev_mk)
        define_and_sort_terminals(device, ports_o, ports_e)
      end
    end
  end

  private

  def define_layers
    # Define layers for extraction.
    define_layer('seed', 'Seed Layer')
    define_layer('optical_ports', 'Connect Optical Terminal')
    define_layer('electrical_ports', 'Connect Electrical Terminal')
    define_layer('meas_mk', 'Measuring parameters Marker')
    define_layer('dev_mk', 'Device Marker')
  end

  def set_device_parameters(device, _region, dev, ports_o, ports_e, meas_mk, dev_mk)
    # Set device parameters based on device type.
    #
    # Args:
    #   device: Device object to set parameters for.
    #   region: Region representing the measured region.
    #   dev: Device layer object.
    #   ports_o: Optical ports layer object.
    #   ports_e: Electrical ports layer object.
    #   meas_mk: Measuring marker layer object.
    #   dev_mk: main marker layer object.
    #
    # Returns:
    #   None

    return unless name.start_with?('straight_heater_meander')

    h_w = calc_h_meander_params(dev, ports_o, ports_e, meas_mk, dev_mk)

    device.set_parameter('heater_width', h_w * $unit)
  end

  def calc_h_meander_params(_dev, _ports_o, _ports_e, meas_mk, dev_mk)
    # Initialize parameters
    h_w = 0.0

    # Calc heater_width value
    dev_mk_len = get_max_length(dev_mk.edges)
    get_width_val(meas_mk.edges, dev_mk_len)
  end

  def define_and_sort_terminals(device, ports_o, ports_e)
    # Define and sort terminals based on location.
    #
    # Args:
    #   device: Device object to define terminals for.
    #   ports_o: Ports layer object for optical connection.
    #   ports_e: Ports layer object for electrical connection.
    #
    # Returns:
    #   None

    # Sort optical and electrical ports separately
    sorted_ports_o = sort_polygons(ports_o)
    sorted_ports_e = sort_polygons(ports_e)

    # Combine all ports attached with their ids
    ports = []
    ports_id = []
    # append optical ports
    sorted_ports_o.each do |ports_pl|
      ports.append(ports_pl)
      ports_id.append(1)
    end
    # append electrical ports
    sorted_ports_e.each do |ports_pl|
      ports.append(ports_pl)
      ports_id.append(2)
    end

    # Defination of terminals
    (1..@num).each do |i|
      define_terminal(device, @reg_dev.terminal_id("#{name}_#{i}"), ports_id[i - 1], ports[i - 1])
    end
  end

  def sort_polygons(polygons)
    # Sort polygons points.
    #
    # Args:
    #   polygons: Polygons to sort.
    #
    # Returns:
    #   Sorted polygons.
    #
    # Note:
    #   This function sorts the points of the input polygons to be ordered as expected.
    #   It takes an array of polygons and returns the sorted array.
    #   The sorting is based on the x-coordinate of the first point of each polygon.
    con_polygons = []
    polygons.merged.each do |ports_pl|
      con_edges = []
      ports_pl.each_edge do |con_ed|
        con_edges.append([con_ed.x1, con_ed.y1])
        con_edges.append([con_ed.x2, con_ed.y2])
      end
      con_polygons.append(con_edges.uniq)
    end
    sorted_ports_polygons = con_polygons.sort_by(&:first)
    sorted_ports = []
    sorted_ports_polygons.each do |sorted_pl|
      ports_pl = RBA::DPolygon.new([RBA::DPoint.new(sorted_pl[0][0], sorted_pl[0][1]),
                                    RBA::DPoint.new(sorted_pl[1][0], sorted_pl[1][1]),
                                    RBA::DPoint.new(sorted_pl[2][0], sorted_pl[2][1]),
                                    RBA::DPoint.new(sorted_pl[3][0], sorted_pl[3][1])])
      sorted_ports.append(ports_pl)
    end

    sorted_ports
  end

  def get_width_val(sel_edges, width_val)
    # Extract distance between edges for space check
    proj = RBA::Metrics::Projection
    width_paris = sel_edges.width_check(width_val, proj)
    width_values = []
    width_paris.each do |edge|
      width_values << edge.distance
    end
    width_values.min
  end

  def get_max_length(sel_edges)
    # Extract max length value for some selected edges
    lengths = []
    len = 0
    sel_edges.each do |edge|
      lengths << edge.length
    end
    lengths.max
  end
end
