# frozen_string_literal: true

# ===================================================================================
# Copyright (c) 2024, Mabrains LLC
# Licensed under the GNU Lesser General Public License, Version 3.0 (the "License");
# you may not use this file except in compliance with the License.

#                    GNU Lesser General Public License
#                       Version 3, 29 June 2007

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# SPDX-License-Identifier: LGPL-3.0
# ===================================================================================

#================================================
#------------- LAYERS DEFINITIONS ---------------
#================================================
polygons_count = 0
logger.info('Read in polygons from layers.')

def get_polygons(layer, data_type)
  ps = polygons(layer, data_type)
  $run_mode == 'deep' ? ps : ps.merged
end

wafer = get_polygons(99_999, 0)
count = wafer.count
logger.info("wafer has #{count} polygons")
polygons_count += count

wg = get_polygons(1, 0)
count = wg.count
logger.info("wg has #{count} polygons")
polygons_count += count

mmi_mk = get_polygons(1, 1)
count = mmi_mk.count
logger.info("mmi_mk has #{count} polygons")
polygons_count += count

mmi_len_mk = get_polygons(1, 2)
count = mmi_len_mk.count
logger.info("mmi_len_mk has #{count} polygons")
polygons_count += count

wgclad = get_polygons(111, 0)
count = wgclad.count
logger.info("wgclad has #{count} polygons")
polygons_count += count

slab150 = get_polygons(2, 0)
count = slab150.count
logger.info("slab150 has #{count} polygons")
polygons_count += count

slab90 = get_polygons(3, 0)
count = slab90.count
logger.info("slab90 has #{count} polygons")
polygons_count += count

deeptrench = get_polygons(4, 0)
count = deeptrench.count
logger.info("deeptrench has #{count} polygons")
polygons_count += count

ge = get_polygons(5, 0)
count = ge.count
logger.info("ge has #{count} polygons")
polygons_count += count

undercut = get_polygons(6, 0)
count = undercut.count
logger.info("undercut has #{count} polygons")
polygons_count += count

wgn = get_polygons(34, 0)
count = wgn.count
logger.info("wgn has #{count} polygons")
polygons_count += count

wgn_clad = get_polygons(36, 0)
count = wgn_clad.count
logger.info("wgn_clad has #{count} polygons")
polygons_count += count

n = get_polygons(20, 0)
count = n.count
logger.info("n has #{count} polygons")
polygons_count += count

np = get_polygons(22, 0)
count = np.count
logger.info("np has #{count} polygons")
polygons_count += count

npp = get_polygons(24, 0)
count = npp.count
logger.info("npp has #{count} polygons")
polygons_count += count

p = get_polygons(21, 0)
count = p.count
logger.info("p has #{count} polygons")
polygons_count += count

pp = get_polygons(23, 0)
count = pp.count
logger.info("pp has #{count} polygons")
polygons_count += count

ppp = get_polygons(25, 0)
count = ppp.count
logger.info("ppp has #{count} polygons")
polygons_count += count

gen = get_polygons(26, 0)
count = gen.count
logger.info("gen has #{count} polygons")
polygons_count += count

gep = get_polygons(27, 0)
count = gep.count
logger.info("gep has #{count} polygons")
polygons_count += count

heater = get_polygons(47, 0)
count = heater.count
logger.info("heater has #{count} polygons")
polygons_count += count

heater_mk = get_polygons(47, 1)
count = heater_mk.count
logger.info("heater_mk has #{count} polygons")
polygons_count += count

heater_len_mk = get_polygons(47, 2)
count = heater_len_mk.count
logger.info("heater_len_mk has #{count} polygons")
polygons_count += count

res_sheet_mk = get_polygons(47, 3)
count = res_sheet_mk.count
logger.info("res_sheet_mk has #{count} polygons")
polygons_count += count

h_meander_mk = get_polygons(47, 4)
count = h_meander_mk.count
logger.info("h_meander_mk has #{count} polygons")
polygons_count += count

m1 = get_polygons(41, 0)
count = m1.count
logger.info("m1 has #{count} polygons")
polygons_count += count

m2 = get_polygons(45, 0)
count = m2.count
logger.info("m2 has #{count} polygons")
polygons_count += count

m3 = get_polygons(49, 0)
count = m3.count
logger.info("m3 has #{count} polygons")
polygons_count += count

viac = get_polygons(40, 0)
count = viac.count
logger.info("viac has #{count} polygons")
polygons_count += count

via1 = get_polygons(44, 0)
count = via1.count
logger.info("via1 has #{count} polygons")
polygons_count += count

via2 = get_polygons(43, 0)
count = via2.count
logger.info("via2 has #{count} polygons")
polygons_count += count

padopen = get_polygons(46, 0)
count = padopen.count
logger.info("padopen has #{count} polygons")
polygons_count += count

dicing = get_polygons(100, 0)
count = dicing.count
logger.info("dicing has #{count} polygons")
polygons_count += count

no_tile_si = get_polygons(71, 0)
count = no_tile_si.count
logger.info("no_tile_si has #{count} polygons")
polygons_count += count

padding = get_polygons(67, 0)
count = padding.count
logger.info("padding has #{count} polygons")
polygons_count += count

devrec = get_polygons(68, 0)
count = devrec.count
logger.info("devrec has #{count} polygons")
polygons_count += count

floorplan = get_polygons(64, 0)
count = floorplan.count
logger.info("floorplan has #{count} polygons")
polygons_count += count

text = get_polygons(66, 0)
count = text.count
logger.info("text has #{count} polygons")
polygons_count += count

port = get_polygons(1, 10)
count = port.count
logger.info("port has #{count} polygons")
polygons_count += count

porte = get_polygons(1, 11)
count = porte.count
logger.info("porte has #{count} polygons")
polygons_count += count

porth = get_polygons(70, 0)
count = porth.count
logger.info("porth has #{count} polygons")
polygons_count += count

show_ports = get_polygons(1, 12)
count = show_ports.count
logger.info("show_ports has #{count} polygons")
polygons_count += count

label_optical_io = labels(201, 0)
count = label_optical_io.count
logger.info("label_optical_io has #{count} polygons")
polygons_count += count

optical_lbl = labels(2000, 0)
count = optical_lbl.count
logger.info("optical_lbl has #{count} polygons")
polygons_count += count

label_settings = get_polygons(202, 0)
count = label_settings.count
logger.info("label_settings has #{count} polygons")
polygons_count += count

te = get_polygons(203, 0)
count = te.count
logger.info("te has #{count} polygons")
polygons_count += count

tm = get_polygons(204, 0)
count = tm.count
logger.info("tm has #{count} polygons")
polygons_count += count

drc_marker = get_polygons(205, 0)
count = drc_marker.count
logger.info("drc_marker has #{count} polygons")
polygons_count += count

label_instance = get_polygons(206, 0)
count = label_instance.count
logger.info("label_instance has #{count} polygons")
polygons_count += count

error_marker = get_polygons(207, 0)
count = error_marker.count
logger.info("error_marker has #{count} polygons")
polygons_count += count

error_path = get_polygons(208, 0)
count = error_path.count
logger.info("error_path has #{count} polygons")
polygons_count += count

source = get_polygons(110, 0)
count = source.count
logger.info("source has #{count} polygons")
polygons_count += count

monitor = get_polygons(101, 0)
count = monitor.count
logger.info("monitor has #{count} polygons")
polygons_count += count

mzi_len_mk = get_polygons(500, 0)
count = mzi_len_mk.count
logger.info("mzi_len_mk has #{count} polygons")
polygons_count += count

mzi_mk = get_polygons(1000, 0)
count = mzi_mk.count
logger.info("mzi_mk has #{count} polygons")
polygons_count += count

ring_mk = get_polygons(1, 3)
count = ring_mk.count
logger.info("ring_mk has #{count} polygons")
polygons_count += count

ring_len_mk = get_polygons(1, 4)
count = ring_len_mk.count
logger.info("ring_len_mk has #{count} polygons")
polygons_count += count

dbr_mk = get_polygons(1, 5)
count = dbr_mk.count
logger.info("dbr_mk has #{count} polygons")
polygons_count += count

coupler_mk = get_polygons(1, 6)
count = coupler_mk.count
logger.info("coupler_mk has #{count} polygons")
polygons_count += count

coupler_len_mk = get_polygons(1, 7)
count = coupler_len_mk.count
logger.info("coupler_len_mk has #{count} polygons")
polygons_count += count

disk_mk = get_polygons(1, 8)
count = disk_mk.count
logger.info("disk_mk has #{count} polygons")
polygons_count += count

gcoupler_mk = get_polygons(1, 9)
count = gcoupler_mk.count
logger.info("gcoupler_mk has #{count} polygons")
polygons_count += count

logger.info("Total no. of polygons in the design is #{polygons_count}")

logger.info('Starting deriving base layers.')

#=== BULK LAYER ===
sub = polygon_layer
